=========================================
Test Document for module 0-add_integer.py
=========================================

This module checks the module behaviour in specific situations.
Syntaxis:
    ``add_integer(a, b=98)``

=========================================
1. Function: ``add_integer`` test cases
=========================================

This function returns the addition of its arguments.

1.1. Import function Testing
    >>> add_integer = __import__("0-add_integer").add_integer

1.2. Argument missing Testing
    1.2.1. No Arguments given
        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing 1 required positional argument: 'a'

    1.2.2. No b argument given
        >>> add_integer(1)
        99
        >>> add_integer(0)
        98

    1.2.3 More than three arguments given
        >>> add_integer(1, 2, 3)
        Traceback (most recent call last):
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

1.3. Argument invalid input
    1.3.1. Arguments are None
        >>> add_integer(None, None)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.2 Argument A is None
        >>> add_integer(None, 10)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.3 Argument B is None
        >>> add_integer(10, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.3.4 Arguments are strings
        >>> add_integer('Hello', 'TDD')
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.5 Arguments A is string
        >>> add_integer('python', 98)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.6 Argument B is string
        >>> add_integer(98, "str")
        Traceback (most recent call last):
        TypeError: b must be an integer
    
    1.3.7 Arguments are lists
        >>> add_integer([], [])
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.8 argument A is a list
        >>> add_integer([], 20)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.9 Argument B is a list
        >>> add_integer(20, [])
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.3.10 Arguments are booleans
        >>> add_integer(False, True)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.11 Argument A is Boolean
        >>> add_integer(True, 10)
        Traceback (most recent call last):
        TypeError: a must be an integer
    
    1.3.12 Argument B is boolean
        >>> add_integer(10, False)
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.3.13 Arguments are dictionaries
        >>> add_integer({'key_1': 1, 'key_2': 2}, {'key_1': 3, 'key_2': 4})
        Traceback (most recent call last):
        TypeError: a must be an integer
    
    1.3.14 Argument A is a dictionary
        >>> add_integer({'key_1': 'str', 'key_2': 2}, 98)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.15 Argument B is dictionary
        >>> add_integer(98, {'key_1': True, 'key_2': False})
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.3.16 Arguments are Sets
        >>> add_integer(set(), set())
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.17 Argument A is set
        >>> add_integer(set(), 15)
        Traceback (most recent call last):
        TypeError: a must be an integer
    
    1.3.18 Argument B is set
        >>> add_integer(12, set())
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.3.19 Arguments are tuple
        >>> add_integer((), ())
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.20 Argument A is tuple
        >>> add_integer((), 1)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.3.21 Argument B is tuple
        >>> add_integer(1, ())
        Traceback (most recent call last):
        TypeError: b must be an integer

1.4 Results Testing
    1.4.1 Argument 0 value
        >>> add_integer(0, 0)
        0
    
    1.4.2 Argument A is zero, not b and greater than 0
        >>> add_integer(0, 4)
        4

    1.4.3 Argument B is zero, not a and greater than 0
        >>> add_integer(4, 0)
        4
    
    1.4.4 Addition of arguments greater than 0
        >>> add_integer(999, 999)
        1998

    1.4.5 Arguments are floats
        >>> add_integer(1.1, 1.1)
        2
    
    1.4.6 Argument A is float
        >>> add_integer(1.1, 1)
        2
    
    1.4.7 Argument B is float
        >>> add_integer(1, 1.1)
        2

    1.4.8 Arguments are negatives
        >>> add_integer(-1, -1)
        -2

    1.4.9 Argument A is negative
        >>> add_integer(-1, 1)
        0

    1.4.10 Argument B is negative
        >>> add_integer(1, -1)
        0

1.5 Mathematical Exceptions
    1.5.1 elements are imaginary numbers
        >>> add_integer(1j, 1j)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.5.2 A is imaginary number
        >>> add_integer(1j, 1)
        Traceback (most recent call last):
        TypeError: a must be an integer

    1.5.3 B is imaginary number
        >>> add_integer(1, 1j)
        Traceback (most recent call last):
        TypeError: b must be an integer

    1.5.4 Sum of infinite arguments
        >>> add_integer(float('inf'), float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer
    
    1.5.5 B is infinite
        >>> add_integer(1, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

    1.5.5 A is infinite
        >>> add_integer(float('inf'), 1)
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

    1.5.6 A is NaN
        >>> add_integer(float('nan'), 1)
        Traceback (most recent call last):
        TypeError: a must be an integer
    
    1.5.7 B is NaN
        >>> add_integer(1, float('nan'))
        Traceback (most recent call last):
        TypeError: b must be an integer
